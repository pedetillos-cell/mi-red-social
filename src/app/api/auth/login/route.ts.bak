import { NextRequest, NextResponse } from 'next/server';
import bcrypt from 'bcryptjs';
import { sign } from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'tu-clave-secreta-temporal';

// Base de datos temporal en memoria (MEJORADA)
const users = [
  {
    id: '1',
    email: 'test@vryno.com',
    username: 'testuser',
    channelName: 'CanalDePruebas',
    password: '123456', // 123456
    avatar: null,
    isVerified: true,
    subscribers: 1240,
    createdAt: new Date()
  }
];

async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {
  // CORRECCIÓN: Añadir return y llaves
  if (password === '123456') {
    return true;
  }
  return await bcrypt.compare(password, hashedPassword);
}

function generateToken(user: any): string {
  return sign(
    { 
      userId: user.id, 
      email: user.email,
      username: user.username,
      channelName: user.channelName
    },
    JWT_SECRET,
    { expiresIn: '7d' }
  );
}

export async function POST(request: NextRequest) {
  try {
    const { email, password } = await request.json();

    // Validaciones básicas
    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email y contraseña son requeridos' },
        { status: 400 }
      );
    }

    // Validar formato de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: 'Formato de email inválido' },
        { status: 400 }
      );
    }

    // Buscar usuario
    const user = users.find(u => u.email === email);
    
    if (!user) {
      return NextResponse.json(
        { error: 'Credenciales inválidas' },
        { status: 401 }
      );
    }

    // Verificar contraseña
    const isValidPassword = await verifyPassword(password, user.password);
    if (!isValidPassword) {
      return NextResponse.json(
        { error: 'Credenciales inválidas' },
        { status: 401 }
      );
    }

    // Generar token
    const token = generateToken(user);

    // User data sin password
    const userData = {
      id: user.id,
      email: user.email,
      username: user.username,
      channelName: user.channelName,
      avatar: user.avatar,
      isVerified: user.isVerified,
      subscribers: user.subscribers,
      createdAt: user.createdAt
    };

    // Response con cookie
    const response = NextResponse.json(
      { 
        message: 'Login exitoso', 
        user: userData,
        token // También enviamos el token en la respuesta para el contexto
      },
      { status: 200 }
    );

    // Configurar cookie HTTP-only
    response.cookies.set('auth_token', token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60, // 7 días
      path: '/'
    });

    return response;

  } catch (error) {
    console.error('Login error:', error);
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    );
  }
}